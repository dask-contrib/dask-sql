name: Upload Python package
on:
  release:
    types: [created]

# Required shell entrypoint to have properly activated conda environments
defaults:
  run:
    shell: bash -l {0}

jobs:
  wheels:
    name: Build and publish py3.${{ matrix.python }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["8", "9", "10"] # 3.x
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU for linux aarch64
        if: contains(matrix.os, 'ubuntu')
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Add arm64 target for macos
        if: contains(matrix.os, 'macos')
        run: rustup target add aarch64-apple-darwin
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_BUILD: 'cp3${{ matrix.python }}-*'
          CIBW_SKIP: '*musllinux*'
          CIBW_ARCHS_LINUX: 'aarch64 x86_64'
          CIBW_ARCHS_WINDOWS: 'AMD64'
          CIBW_ARCHS_MACOS: 'x86_64 arm64'
          CIBW_ENVIRONMENT_LINUX: 'CARGO_NET_GIT_FETCH_WITH_CLI="true" PATH="$HOME/.cargo/bin:$PATH"'
          # Without CARGO_NET_GIT_FETCH_WITH_CLI we oom (https://github.com/rust-lang/cargo/issues/10583)
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_BEFORE_BUILD: 'pip install -U setuptools-rust'
          CIBW_BEFORE_BUILD_LINUX: >
            pip install -U setuptools-rust &&
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&
            rustup show
        with:
          package-dir: .
          output-dir: dist
          config-file: "dask_planner/pyproject.toml"
      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: "3.8"
          channel-priority: strict
      - name: Check dist files
        run: |
          mamba install twine

          twine check dist/*
          ls -lh dist/
      - name: Upload binary wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels for py3.${{ matrix.python }} on ${{ matrix.os }}
          path: dist/*
      - name: Publish package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
  sdist:
    name: Build and publish source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: "3.8"
          channel-priority: strict
      - name: Build source distribution
        run: |
          mamba install setuptools-rust twine

          python setup.py sdist
      - name: Check dist files
        run: |
          twine check dist/*
          ls -lh dist/
      - name: Publish source distribution
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
