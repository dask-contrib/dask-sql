---
# Test the main branch and every pull request by
# 1. building the jar on ubuntu
# 2. testing code (using the build jar) on ubuntu and windows, with different java versions
name: Test
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    # This build step should be similar to the deploy build, to make sure we actually test
    # the future deployable
    name: "Build the jar on ubuntu"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-v1-${{ hashFiles('**/pom.xml') }}
      - name: Cache downloaded conda packages
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-v1-${{ hashFiles('conda.txt') }}
      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
      - name: Install dependencies and build the jar
        shell: bash -l {0}
        run: |
          conda install --file conda.txt -c conda-forge
          which python
          pip list
          conda list

          # This needs to happen in the same
          # shell, because otherwise the JAVA_HOME
          # will be wrong on windows
          python setup.py java
      - name: Upload the jar
        uses: actions/upload-artifact@v1
        with:
          name: jar
          path: dask_sql/jar/DaskSQL.jar

  test:
    name: "Test (${{ matrix.os }}, java: ${{ matrix.java }}, python: ${{ matrix.python }})"
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [8, 11]
        os: [ubuntu-latest, windows-latest]
        python: [3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-v1-${{ matrix.java }}-${{ hashFiles('**/pom.xml') }}
      - name: Cache downloaded conda packages
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-v1-${{ matrix.java }}-${{ hashFiles('conda.txt') }}
      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
      - name: Download the pre-build jar
        uses: actions/download-artifact@v1
        with:
          name: jar
          path: dask_sql/jar/
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda install python=${{ matrix.python }} --file conda.txt -c conda-forge
      - name: Install sqlalchemy and docker pkg for postgres test
        shell: bash -l {0}
        run: |
          # explicitly install docker, fugue and sqlalchemy package
          conda install sqlalchemy psycopg2 -c conda-forge
          pip install docker "fugue[sql]>=0.5.3"
        if: matrix.os == 'ubuntu-latest'
      - name: Install Java (again) and test with pytest
        shell: bash -l {0}
        run: |
          conda install openjdk=${{ matrix.java }}
          which python
          pip list
          conda list

          # This needs to happen in the same
          # shell, because otherwise the JAVA_HOME
          # will be wrong on windows
          pytest --junitxml=junit/test-results.xml --cov-report=xml tests
      - name: Upload pytest test results
        uses: actions/upload-artifact@v1
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
